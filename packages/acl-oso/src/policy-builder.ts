import {isPrincipalPolicy, isResourcePolicy, PolicyManager} from '@bleco/acl';
import {EntityClass} from '@bleco/query';
import {Entity} from '@loopback/repository';
import {Relation} from 'oso/dist/src/filter';
import {Class} from 'oso/dist/src/types';
import {buildClassFields} from './helper';
import {PolarGeneration} from './polar';

interface ModelEntry<T extends Entity = Entity> {
  model: EntityClass<T>;
  fields: Record<string, Class | Relation>;
}

export class OsoPolicyBuilder {
  models: Map<string, ModelEntry>;

  constructor(protected readonly policyManager: PolicyManager) {
    this.build();
  }

  build() {
    this.models = new Map();

    const policies = this.policyManager.policies;
    for (const policy of policies) {
      addModelRecursively(policy.model, this.models);
    }
    return this;
  }

  async generatePolar() {
    return PolarGeneration.generate(writer => {
      writer.writeLine('# generated by oso-policy-builder');
      writer.writeLine('allow(principal, action, resource) if has_permission(principal, action, resource);');
      this.policyManager.policies
        .filter(isPrincipalPolicy)
        .forEach(policy => PolarGeneration.generateActorScripts(writer, policy));
      this.policyManager.policies
        .filter(isResourcePolicy)
        .forEach(policy => PolarGeneration.generateResourceScripts(writer, policy));
    });
  }
}

function addModelRecursively(model: EntityClass, models: Map<string, ModelEntry>) {
  const modelName = model.name;
  if (!models.has(modelName)) {
    models.set(modelName, {model, fields: buildClassFields(model)});

    if (model?.definition?.relations) {
      for (const name in model?.definition?.relations) {
        const relation = model.definition.relations[name];
        addModelRecursively(relation.target(), models);
      }
    }
  }
}
